package org.wattdepot.resource.sensordata;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertNotSame;
import javax.xml.datatype.XMLGregorianCalendar;
import org.hackystat.utilities.tstamp.Tstamp;
import org.junit.Test;
import org.wattdepot.resource.sensordata.jaxb.Properties;
import org.wattdepot.resource.sensordata.jaxb.Property;
import org.wattdepot.resource.sensordata.jaxb.SensorData;

/**
 * Ensures that the equals() and hashCode() methods that have been manually added to the JAXB
 * autogenerated code are working. This is important, because if the schema files are changed and
 * new Java code is generated via XJC, then the manually added methods will be silently blown away.
 * These tests act as a backstop to ensure that if that happens, tests will fail.
 * 
 * If we eventually move to autogenerated equals() and hashCode() via XJC plugins, then these tests
 * will confirm that the plugins are working properly.
 * 
 * @author Robert Brewer
 */
public class TestSensorDataJaxb {

  /**
   * Tests equals and hashCode for the SensorData Property type.
   */
  @Test
  public void testSensorDataProperty() {
    String key = "some-key", value = "some-value";
    Property prop1 = SensorDataUtils.makeSensorDataProperty(key, value), prop2 =
        SensorDataUtils.makeSensorDataProperty(key, value);

    assertNotSame("Two newly created SensorData Property are the same object", prop1, prop2);
    assertEquals("Two SensorData Property with identical keys and values are not equal", prop1,
        prop2);
    assertEquals("Two SensorData Property with identical keys and values have different hashCodes",
        prop1.hashCode(), prop2.hashCode());
  }

  /**
   * Tests equals and hashCode for the SensorData Properties type.
   */
  @Test
  public void testSensorDataProperties() {
    String key1 = "some-key", value1 = "some-value", key2 = "foo-key", value2 = "foo-value";
    // Make two pairs of Property objects that have same keys &values
    Property prop1 = SensorDataUtils.makeSensorDataProperty(key1, value1);
    Property prop2 = SensorDataUtils.makeSensorDataProperty(key2, value2);
    Property prop3 = SensorDataUtils.makeSensorDataProperty(key1, value1);
    Property prop4 = SensorDataUtils.makeSensorDataProperty(key2, value2);
    Properties props1 = new Properties(), props2 = new Properties();

    props1.getProperty().add(prop1);
    props1.getProperty().add(prop2);
    props2.getProperty().add(prop3);
    props2.getProperty().add(prop4);

    assertNotSame("Two newly created SensorData Properties are the same object", props1, props2);
    assertEquals(
        "Two SensorData Properties with lists of identical Property objects are not equal", props1,
        props2);
    assertEquals("Two SensorData Properties with identical lists have different hashCodes", props1
        .hashCode(), props2.hashCode());
  }

  /**
   * Tests equals and hashCode for the SensorData type.
   * 
   * @throws Exception If there are problems creating the timestamp
   */
  @Test
  public void testSensorData() throws Exception {
    String key1 = "some-key", value1 = "some-value", key2 = "foo-key", value2 = "foo-value";
    // Make two pairs of Property objects that have same keys &values
    Property prop1 = SensorDataUtils.makeSensorDataProperty(key1, value1);
    Property prop2 = SensorDataUtils.makeSensorDataProperty(key2, value2);
    Property prop3 = SensorDataUtils.makeSensorDataProperty(key1, value1);
    Property prop4 = SensorDataUtils.makeSensorDataProperty(key2, value2);
    Properties props1 = new Properties(), props2 = new Properties();
    SensorData data1, data2;

    props1.getProperty().add(prop1);
    props1.getProperty().add(prop2);
    props2.getProperty().add(prop3);
    props2.getProperty().add(prop4);

    XMLGregorianCalendar timestamp1 = Tstamp.makeTimestamp("2009-07-28T08:00:00.000-10:00");
    XMLGregorianCalendar timestamp2 = Tstamp.makeTimestamp("2009-07-28T08:00:00.000-10:00");
    data1 =
        SensorDataUtils.makeSensorData(timestamp1, "JUnit",
            "http://localhost:8183/wattdepot/sources/saunders-hall", props1);
    data2 =
        SensorDataUtils.makeSensorData(timestamp2, "JUnit",
            "http://localhost:8183/wattdepot/sources/saunders-hall", props2);

    assertNotSame("Two newly created SensorData are the same object", data1, data2);
    assertEquals("Two SensorData objects with identical fields are not equal", data1, data2);
    assertEquals("Two SensorData objects with identical fields have different hashCodes", data1
        .hashCode(), data2.hashCode());
  }

  @Test
  public void testToString() throws Exception {
    String key1 = "some-key", value1 = "some-value", key2 = "foo-key", value2 = "foo-value";
    Property prop1 = SensorDataUtils.makeSensorDataProperty(key1, value1);
    Property prop2 = SensorDataUtils.makeSensorDataProperty(key2, value2);
    Properties props1 = new Properties();
    SensorData data1;

    props1.getProperty().add(prop1);
    props1.getProperty().add(prop2);

    XMLGregorianCalendar timestamp1 = Tstamp.makeTimestamp("2009-07-28T08:00:00.000-10:00");
    data1 =
        SensorDataUtils.makeSensorData(timestamp1, "JUnit",
            "http://localhost:8183/wattdepot/sources/saunders-hall", props1);
    assertEquals(
        "SensorData [properties=[Property [key=some-key, value=some-value], Property [key=foo-key,"
            + " value=foo-value]], source=http://localhost:8183/wattdepot/sources/saunders-hall,"
            + " timestamp=2009-07-28T08:00:00.000-10:00, tool=JUnit]", data1.toString());
  }
}
